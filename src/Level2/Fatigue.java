package Level2;

import java.util.Arrays;

public class Fatigue {
    public static void main(String[] args) {
        /*
            피로도
            문제 설명
            XX게임에는 피로도 시스템(0 이상의 정수로 표현합니다)이 있으며, 일정 피로도를 사용해서 던전을 탐험할 수 있습니다.
            이때, 각 던전마다 탐험을 시작하기 위해 필요한 "최소 필요 피로도"와 던전 탐험을 마쳤을 때 소모되는 "소모 피로도"가 있습니다.
            "최소 필요 피로도"는 해당 던전을 탐험하기 위해 가지고 있어야 하는 최소한의 피로도를 나타내며, "소모 피로도"는 던전을 탐험한 후 소모되는 피로도를 나타냅니다.
            예를 들어 "최소 필요 피로도"가 80, "소모 피로도"가 20인 던전을 탐험하기 위해서는 유저의 현재 남은 피로도는 80 이상 이어야 하며, 던전을 탐험한 후에는 피로도 20이 소모됩니다.

            이 게임에는 하루에 한 번씩 탐험할 수 있는 던전이 여러개 있는데, 한 유저가 오늘 이 던전들을 최대한 많이 탐험하려 합니다.
            유저의 현재 피로도 k와 각 던전별 "최소 필요 피로도", "소모 피로도"가 담긴 2차원 배열 dungeons 가 매개변수로 주어질 때,
            유저가 탐험할수 있는 최대 던전 수를 return 하도록 solution 함수를 완성해주세요.

            제한사항
            k는 1 이상 5,000 이하인 자연수입니다.
            dungeons의 세로(행) 길이(즉, 던전의 개수)는 1 이상 8 이하입니다.
            dungeons의 가로(열) 길이는 2 입니다.
            dungeons의 각 행은 각 던전의 ["최소 필요 피로도", "소모 피로도"] 입니다.
            "최소 필요 피로도"는 항상 "소모 피로도"보다 크거나 같습니다.
            "최소 필요 피로도"와 "소모 피로도"는 1 이상 1,000 이하인 자연수입니다.
            서로 다른 던전의 ["최소 필요 피로도", "소모 피로도"]가 서로 같을 수 있습니다.

            입출력 예
            k	         dungeons	      result
            80	[[80,20],[50,40],[30,10]]	3

            입출력 예 설명
            현재 피로도는 80입니다.

            만약, 첫 번째 → 두 번째 → 세 번째 던전 순서로 탐험한다면
            현재 피로도는 80이며, 첫 번째 던전을 돌기위해 필요한 "최소 필요 피로도" 또한 80이므로, 첫 번째 던전을 탐험할 수 있습니다. 첫 번째 던전의 "소모 피로도"는 20이므로, 던전을 탐험한 후 남은 피로도는 60입니다.
            남은 피로도는 60이며, 두 번째 던전을 돌기위해 필요한 "최소 필요 피로도"는 50이므로, 두 번째 던전을 탐험할 수 있습니다. 두 번째 던전의 "소모 피로도"는 40이므로, 던전을 탐험한 후 남은 피로도는 20입니다.
            남은 피로도는 20이며, 세 번째 던전을 돌기위해 필요한 "최소 필요 피로도"는 30입니다. 따라서 세 번째 던전은 탐험할 수 없습니다.

            만약, 첫 번째 → 세 번째 → 두 번째 던전 순서로 탐험한다면
            현재 피로도는 80이며, 첫 번째 던전을 돌기위해 필요한 "최소 필요 피로도" 또한 80이므로, 첫 번째 던전을 탐험할 수 있습니다. 첫 번째 던전의 "소모 피로도"는 20이므로, 던전을 탐험한 후 남은 피로도는 60입니다.
            남은 피로도는 60이며, 세 번째 던전을 돌기위해 필요한 "최소 필요 피로도"는 30이므로, 세 번째 던전을 탐험할 수 있습니다. 세 번째 던전의 "소모 피로도"는 10이므로, 던전을 탐험한 후 남은 피로도는 50입니다.
            남은 피로도는 50이며, 두 번째 던전을 돌기위해 필요한 "최소 필요 피로도"는 50이므로, 두 번째 던전을 탐험할 수 있습니다. 두 번째 던전의 "소모 피로도"는 40이므로, 던전을 탐험한 후 남은 피로도는 10입니다.
            따라서 이 경우 세 던전을 모두 탐험할 수 있으며, 유저가 탐험할 수 있는 최대 던전 수는 3입니다.
         */

        /*
         *   너비 우선 탐색(BFS : Bread-Frist-Search) 알고리즘 구현
         *  1. 함수 호출 시, index(배열의 위치) 및 count(던전을 모두 돌았을 경우 종료하기 위함) 0으로 파라미터 전달 (=> 반복문으로 수행하도록 수정)
         *  2. 인덱스를 기준으로 첫번쨰 던전을 지정한다. (count++) => 현재 피로도(k)가 던전 최소 피로도보다 작을 경우 종료
         *  3. 인덱스를 제외한 나머지 던전들을 두번쨰 던전으로 지정한다. (count++) => 현재 피로도(k)가 던전 최소 피로도보다 작을 경우 종료
         *  4. 던전 회수(count)가 최대 던전 수와 같을 경우 종료, 작을 경우 다음 던전을 돌기 위해 함수를 재호출한다.
         *     (이떄, 이미 탐험한 던전과 탐험하지 않은 던전을 확인 할 수 있는 방법이 필요하다.)
         * */

        /* 완전 탐색으로 풀어야한다 : DFS(깊이 우선 탐색 : Death-First-Search) , BFS(너비 우선 탐색 : Bread-First-Search) 이용하기 => 재귀함수 이용하기*/
        /* TC 1 result : 3 */
        //int k = 80;
        //int[][] dungeons = {{60,50}, {80,20}, {50,40}, {30,10}};

        /* TC 2 result : 4 */
        int k = 40;
        int[][] dungeons = {{40, 20}, {10, 10}, {10, 10}, {10, 10}, {10, 10}};

        int sum = 0;
        int answer = 0;

        for (int i = 0; i < dungeons.length; i++) sum += dungeons[i][1];

        if (k >= sum) System.out.println(dungeons.length);
        else {
            /*
             문제점..
             1.던전을 이미 돈곳은 모든 경우의 수에서 독립적으로 확인해야하는데 (배열로 하면 주소값이 동일해서 이전 조건에서 지정한게 초기화가 안됨)
             2.현재피로도(k)도 1번과 동일
            * */
            bfs();

            System.out.println(answer);
        }
    }

    public static int bfs () {
        return 1;
    }
}
