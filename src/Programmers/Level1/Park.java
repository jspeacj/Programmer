package Programmers.Level1;

public class Park {
    public static void main(String[] args) {
        /*
            [PCCE 기출문제] 10번 / 공원

            문제 설명
            지민이는 다양한 크기의 정사각형 모양 돗자리를 가지고 공원에 소풍을 나왔습니다.
            공원에는 이미 돗자리를 깔고 여가를 즐기는 사람들이 많아 지민이가 깔 수 있는 가장 큰 돗자리가 어떤 건지 확인하려 합니다.
            예를 들어 지민이가 가지고 있는 돗자리의 한 변 길이가 5, 3, 2 세 종류이고,
            사람들이 다음과 같이 앉아 있다면 지민이가 깔 수 있는 가장 큰 돗자리는 3x3 크기입니다.

            10.jpg

            지민이가 가진 돗자리들의 한 변의 길이들이 담긴 정수 리스트 mats,
            현재 공원의 자리 배치도를 의미하는 2차원 문자열 리스트 park가 주어질 때 지민이가 깔 수 있는 가장 큰 돗자리의 한 변 길이를 return 하도록 solution 함수를 완성해 주세요.
            아무런 돗자리도 깔 수 없는 경우 -1을 return합니다.

            제한사항
            1 ≤ mats의 길이 ≤ 10
            1 ≤ mats의 원소 ≤ 20
            mats는 중복된 원소를 가지지 않습니다.

            1 ≤ park의 길이 ≤ 50
            1 ≤ park[i]의 길이 ≤ 50
            park[i][j]의 원소는 문자열입니다.
            park[i][j]에 돗자리를 깐 사람이 없다면 "-1", 사람이 있다면 알파벳 한 글자로 된 값을 갖습니다.

            입출력 예
            mats	                    park	                                    result : 3
            [5,3,2]	[["A", "A", "-1", "B", "B", "B", "B", "-1"], ["A", "A", "-1", "B", "B", "B", "B", "-1"], ["-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"], ["D", "D", "-1", "-1", "-1", "-1", "E", "-1"], ["D", "D", "-1", "-1", "-1", "-1", "-1", "F"], ["D", "D", "-1", "-1", "-1", "-1", "E", "-1"]]

            입출력 예 설명
            입출력 예 #1
            지문과 동일합니다.
            cpp를 응시하는 경우 리스트는 배열과 동일한 의미이니 풀이에 참고해주세요.
            ex) 번호가 담긴 정수 리스트 numbers가 주어집니다. => 번호가 담긴 정수 배열 numbers가 주어집니다.
            java를 응시하는 경우 리스트는 배열, 함수는 메소드와 동일한 의미이니 풀이에 참고해주세요.
            ex) solution 함수가 올바르게 작동하도록 한 줄을 수정해 주세요. => solution 메소드가 올바르게 작동하도록 한 줄을 수정해 주세요.
         */

        /* TC 1 result : 3 */
        int[] mats = {5, 3, 2};
        String[][] park = {{"A", "A", "-1", "B", "B", "B", "B", "-1"}, {"A", "A", "-1", "B", "B", "B", "B", "-1"}, {"-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1"},
                {"D", "D", "-1", "-1", "-1", "-1", "E", "-1"}, {"D", "D", "-1", "-1", "-1", "-1", "-1", "F"}, {"D", "D", "-1", "-1", "-1", "-1", "E", "-1"}};

        /*
            풀이 방법 :
            완전 탐색 기법으로 풀이를 할 수 있지만 시간 최적화를 위해 문제 조건에 맞는 케이스만 찾도록 최적화한다.
            문제에서 주어진 조건 : 돗자리는 정사각형이다 =>  가로/세로 길이가 동일해야하므로 가로/세로 기준 모두 -1이어야 한다.
            1. 주어진 배열 mats을 내림차순으로 정렬한 뒤, 반복문을 이용 하여 순차적으로 정사각형으로 이루어질만한 각 가로줄 및 세로줄이 연속적인 범위를 찾는다.
            2. 정사각형 조건에 적합할만한 범위를 찾은 뒤 선언한 map에 할당
            3. map에 할당된 key(x좌표), value(y좌표)를 기준으로 해당 mats 값에 해당하는 정사각형 범위가 존재할 경우 해당 값 출력 후 종료
        */
    }
}
