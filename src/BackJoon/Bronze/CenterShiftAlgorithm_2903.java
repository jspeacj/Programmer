package BackJoon.Bronze;

import java.util.Scanner;

public class CenterShiftAlgorithm_2903 {
    public static void main(String[] args) {
        /*
            중앙 이동 알고리즘 (브론즈 3)

            문제
            상근이는 친구들과 함께 SF영화를 찍으려고 한다. 이 영화는 외계 지형이 필요하다.
            실제로 우주선을 타고 외계 행성에 가서 촬영을 할 수 없기 때문에, 컴퓨터 그래픽으로 CG처리를 하려고 한다.

            외계 지형은 중앙 이동 알고리즘을 이용해서 만들려고 한다.

            알고리즘을 시작하면서 상근이는 정사각형을 이루는 점 4개를 고른다. 그 후에는 다음과 같은 과정을 거쳐서 지형을 만든다.

            정사각형의 각 변의 중앙에 점을 하나 추가한다.
            정사각형의 중심에 점을 하나 추가한다.
            초기 상태에서 위와 같은 과정을 한 번 거치면 총 4개의 정사각형이 새로 생긴다.
            이와 같은 과정을 상근이가 만족할 때 까지 계속한다.

            아래 그림은 과정을 총 2번 거쳤을 때까지의 모습이다.

            상근이는 어떤 점은 한 개 보다 많은 정사각형에 포함될 수 있다는 사실을 알았다.
            메모리 소모량을 줄이기 위해서 중복하는 점을 한 번만 저장하려고 한다.
            과정을 N번 거친 후 점 몇 개를 저장해야 하는지 구하는 프로그램을 작성하시오.

            입력
            첫째 줄에 N이 주어진다. (1 ≤ N ≤ 15)

            출력
            첫째 줄에 과정을 N번 거친 후 점의 수를 출력한다.

            예제 입력 1
            1
            예제 출력 1
            9

            예제 입력 2
            2
            예제 출력 2
            25

            예제 입력 3
            5
            예제 출력 3
            1089

            풀이 :
            제곱해야할 값 : (이전 한변의 길이 * 2) - 1
            기본값 : 2
            1일 경우 : (2 * 2) - 1 = 3 (9)
            2일 경우 : (3 * 2) - 1 = 5 (25)
            3일 경우 : (5 * 2) - 1 = 9 (81)
            4일 경우 : (9 * 2) - 1 = 17(289)
            5일 경우 : (17 * 2) - 1 = 33 (1089)
         */

        Scanner scan = new Scanner(System.in);

        int num = scan.nextInt();
        int sqrt = 2;
        int total = 0;

        for (int i = 0; i < num; i++) {
            sqrt = (sqrt * 2) - 1; // 제곱
            total = sqrt * sqrt;
        }

        System.out.println(total);
    }
}
